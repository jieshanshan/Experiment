RuleID,Rules,Types,Severity,ProjectNum,Fixed,Open,threshold,domain,description
3,__init__ should not return a value,Bug,BLOCKER,1,0,1,,,"By contract, every Python function returns something, even if it's the None value, which can be returned implicitly by omitting the return statement, or explicitly. The __init__ method is required to return None. A TypeError will be raised if the __init__ method either yields or returns any expression other than None. Returning some expression that evaluates to None will not raise an error, but is considered bad practice."
7,Methods and field names should not differ only by capitalization,Code Smell,BLOCKER,9,15,28,,,Looking at the set of methods and fields in a class and finding two that differ only by capitalization is confusing to users of the class.
12,"""<>"" should not be used to test inequality",Code Smell,MAJOR,1,2,0,,,The forms <> and != are equivalent. But in Python 2.7.3 the <> form is considered obsolete.
13,Jump statements should not be followed by other statements,Bug,MAJOR,8,36,11,,control flow,"Jump statements (return, break, continue, and raise) move control flow out of the current code block. Typically, any statements in a block that come after a jump are simply wasted keystrokes lying in wait to confuse the unwary."
14,Docstrings should be defined,Code Smell,MAJOR,44,13009,18355,,,"A string literal that is the first statement in a module, function, class, or method is a docstring. A docstring should document what a caller needs to know about the code. Information about what it does, what it returns, and what it requires are all valid candidates for documentation. Well written docstrings allow callers to use your code without having to first read it and understand its logic. By convention, docstrings are enclosed in three sets of double-quotes."
15,Identical expressions should not be used on both sides of a binary operator,Bug,MAJOR,9,6,25,,,"Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified. This rule ignores *, +, and =."
16,"Sections of code should not be ""commented out""",Code Smell,MAJOR,31,866,692,,,Programmers should not comment out code as it bloats programs and reduces readability. Unused code should be deleted and can be retrieved from source control history if required.
20,Functions should not be too complex,Code Smell,CRITICAL,29,329,483,maximumFunctionComplexityThreshold:15,complex,The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test thoroughly.
21,"The ""print"" statement should not be used",Code Smell,MAJOR,31,1350,1046,,,The print statement was removed in Python 3.0. The built-in function should be used instead.
23,"""\"" should only be used as an escape character outside of raw strings",Bug,MAJOR,20,899,413,,,"Typically, backslashes are seen only as part of escape sequences. Therefore, the use of a backslash outside of a raw string or escape sequence looks suspiciously like a broken escape sequence."
24,"Control flow statements ""if"", ""for"", ""while"", ""try"" and ""with"" should not be nested too deeply",Code Smell,CRITICAL,27,531,734,maximum:3,control flow,"Nested if, for, while, try, and with statements are key ingredients for making what's known as ""Spaghetti code"". Such code is hard to read, refactor and therefore maintain."
25,Redundant pairs of parentheses should be removed,Code Smell,MAJOR,7,13,16,,,"The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But redundant pairs of parentheses could be misleading, and should be removed."
26,Two branches in a conditional structure should not have exactly the same implementation,Code Smell,MAJOR,21,156,164,,duplicate,"Having two branches in the same if structure with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then they should be combined."
29,Cognitive Complexity of functions should not be too high,Code Smell,CRITICAL,38,1329,1921,maximum authorized complexity:15,complex,Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be difficult to maintain.
31,"The ""exec"" statement should not be used",Bug,BLOCKER,3,0,5,,,"Use of the exec statement could be dangerous, and should be avoided. Moreover, the exec statement was removed in Python 3.0. Instead, the built-in exec() function can be used."
36,A field should not duplicate the name of its containing class,Code Smell,MAJOR,11,8,20,,complex,It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider the common practice of naming a class instance for the class itself.Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular aspect of the class it represents or holds.
38,Statements should be on separate lines,Code Smell,MAJOR,14,975,831,,,"For better readability, do not put more than one statement on a single line."
40,Functions should not contain too many return statements,Code Smell,MAJOR,31,257,449,maximum:3,complex,Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a return statement is encountered. This makes it harder to read and understand the logic of the function.
41,"Collapsible ""if"" statements should be merged",Code Smell,MAJOR,30,205,286,,,Merging collapsible if statements increases the code's readability.
42,Function names should comply with a naming convention,Code Smell,MAJOR,28,809,961,"format:^[a-z_][a-z0-9_]{2,}$",,Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.
45,Nested blocks of code should not be left empty,Code Smell,MAJOR,16,67,113,,,Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.
46,"Functions, methods and lambdas should not have too many parameters",Code Smell,MAJOR,26,1237,1041,maximum parameters:4,complex,A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.
47,Files should not have too many lines of code,Code Smell,MAJOR,16,83,181,maximum:1000,complex,"A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those smaller files will not only be easier to understand but also probably easier to test."
49,Variables should not be self-assigned,Bug,MAJOR,10,43,35,,duplicate,"There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead."
50,Lines should not be too long,Code Smell,MAJOR,35,6348,6399,maximumLineLength:120,complex,Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.
51,Python parser failure,Code Smell,MAJOR,8,15,4,,,"When the Python parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse."
52,Backticks should not be used,Bug,BLOCKER,2,0,5,,,"Backticks are a deprecated alias for repr(). Don't use them any more, the syntax was removed in Python 3.0."
54,"Track uses of ""FIXME"" tags",Code Smell,MAJOR,10,46,127,,,"FIXME?tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later. Sometimes the developer will not have the time or will simply forget to get back to that tag. This rule is meant to track those tags and to ensure that they do not go unnoticed."
56,Lines should have sufficient coverage by tests,Code Smell,MAJOR,44,2671,4924,minimumLineCoverageRatio:65%,,An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.
57,Source files should have a sufficient density of comment lines,Code Smell,MAJOR,40,2214,2353,minimumCommentDensity:25%,,An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.
58,Source files should not have any duplicated blocks,Code Smell,MAJOR,31,732,614,,duplicate,An issue is created on a file as soon as there is at least one block of duplicated code on this file
273,Bad option value,Code Smell,MAJOR,2,13,9,,,Used when a bad value for an inline option is encountered. The option exists but its value is not valid. The options can be specified in the Pylint configuration file and can be overridden in the Pylint command line.
274,Calling of not callable,Code Smell,MAJOR,12,65,17,,,Used when an object being called has been inferred to a non callable object.
276,Access of nonexistent member,Code Smell,MAJOR,34,1438,2035,,,Used when a variable is accessed for an nonexistent member.
281,Syntax error,Code Smell,MAJOR,31,553,419,,,Used when a syntax error is raised for a module.
299,Too many arguments for logging format string,Code Smell,MAJOR,5,3,9,,,Used when a logging format string is given too few arguments.
328,Redefined function/class/method,Code Smell,MAJOR,13,61,45,,,Used when a function / class / method is redefined.
355,Method has no argument,Code Smell,MAJOR,8,17,22,,,Used when a method which should have the bound instance as first argument has no argument defined.
360,Undefined name,Code Smell,MAJOR,26,1135,1840,,,Used when a name cannot be found in a module.
363,"Method should have ""self"" as first argument",Code Smell,MAJOR,9,32,73,,,"Used when a method has an attribute different the ""self"" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!"
364,Format string ends in middle of conversion specifier,Code Smell,MAJOR,1,0,2,,,Used when a format string terminates before the end of a conversion specifier.
368,Not enough arguments for format string,Code Smell,MAJOR,3,1,7,,,Used when a format string that uses unnamed conversion specifiers is given too many arguments.
369,Too many arguments for format string,Code Smell,MAJOR,8,22,16,,,Used when a format string that uses unnamed conversion specifiers is given too few arguments.
389,Access to member before its definition,Code Smell,MAJOR,7,30,19,,,Used when an instance member is accessed before it's actually assigned.
390,Method hidden by attribute of super class,Code Smell,MAJOR,7,8,15,,,Used when a class defines a method which is hidden by an instance attribute from an ancestor class.
393,Using variable before assignment,Code Smell,MAJOR,5,2,3,,,Used when a local variable is accessed before it's assignment.
394,Undefined variable,Code Smell,MAJOR,32,3628,2757,,,Used when an undefined variable is accessed.
403,Too few arguments,Code Smell,MAJOR,15,39,159,,,Used when a function call passes too few arguments.
411,Bad first argument given to super,Code Smell,MAJOR,7,12,19,,,Used when another argument than the current class is given as first argument of the super builtin.
414,Passing unexpected keyword argument in function call,Code Smell,MAJOR,6,51,40,,,Used when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names.
418,Too many positional arguments for function call,Code Smell,MAJOR,10,36,92,,,Used when a function call passes too many positional arguments.
424,NotImplemented raised - should raise NotImplementedError,Code Smell,MAJOR,6,37,8,,,Used when NotImplemented is raised instead of NotImplementedError.
432,Mixed tabs/spaces indentation,Code Smell,MAJOR,7,1221,2323,,,"Used when there are some mixed tabs and spaces in a module. As indentation is part of Python's syntax, inconsistencies in its usage are usually considered a major issue."
438,Assigning to function call which doesn't return,Code Smell,MAJOR,1,2,1,,,Used when an assignment is done on a function call but the inferred function doesn't return anything.
439,"Raising only allowed for classes, instances or strings",Code Smell,MAJOR,6,7,321,,,"Used when something which is neither a class, an instance or a string is raised (i.e. a 'TypeError' will be raised)."
440,Bad except clauses order,Code Smell,MAJOR,1,1,0,,,"Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be catched by the most specific handler."
